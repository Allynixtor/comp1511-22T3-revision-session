max_cpu_seconds=3

files=billys_books.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g billys_books.c -o billys_books

command=./billys_books

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="11\nCBDEAGHIFJK\n"
2 stdin="5\nDEGHH\n"
3 stdin="8\nAABBCCDD\n"
4 stdin="2\nBA\n"
5 stdin="1\nA\n"
6 stdin="21\nPAJSHJPALMNHNMJKSAAYU\n"
7 stdin="7\nHSBPOBS\n"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:


### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='ABCDEFGHIJK\n'
2 expected_stdout='DGEHH\n'
3 expected_stdout='CAABBCDD\n'
4 expected_stdout='BA\n'
5 expected_stdout='A\n'
6 expected_stdout='JSMPANSHJPALUNHMJKAAY\n'
7 expected_stdout='BSHBPOS\n'