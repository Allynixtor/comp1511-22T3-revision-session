max_cpu_seconds=3

files=anagram.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g anagram.c -o anagram

command=./anagram

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="angel\nglean\n"
2 stdin="yummy\nmummy\n"
3 stdin="word\nrowd\n"
4 stdin="donkey\nmonkey\n"
5 stdin="daddy\nyadyd\n"
6 stdin="jimmy\nyjmmi\n"
7 stdin="million\nniionllm\n"
8 stdin="i\ni\n"
9 stdin="a\nh\n"
10 stdin="clearly\nnot\n"
11 stdin="yolo\n\n"


## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:


### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='Your two words are an anagram!\n'
2 expected_stdout='Your two words are not an anagram!\n'
3 expected_stdout='Your two words are an anagram!\n'
4 expected_stdout='Your two words are not an anagram!\n'
5 expected_stdout='Your two words are not an anagram!\n'
6 expected_stdout='Your two words are an anagram!\n'
7 expected_stdout='Your two words are not an anagram!\n'
8 expected_stdout='Your two words are an anagram!\n'
9 expected_stdout='Your two words are not an anagram!\n'
10 expected_stdout='Your two words are not an anagram!\n'
11 expected_stdout='Your two words are not an anagram!\n'