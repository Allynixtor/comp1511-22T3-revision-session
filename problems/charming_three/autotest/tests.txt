max_cpu_seconds=3

files=charming_three.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g charming_three.c -o charming_three

command=./charming_three

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="5 2 7\n"
2 stdin="1 2 3\n"
3 stdin="2 5 3\n"
4 stdin="9 0 2\n"
5 stdin="3 3 3\n"
6 stdin="9 8 7\n"
7 stdin="3 9 2\n"


## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:


### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='2 5 7\n'
2 expected_stdout='1 2 3\n'
3 expected_stdout='2 3 5\n'
4 expected_stdout='0 2 9\n'
5 expected_stdout='3 3 3\n'
6 expected_stdout='7 8 9\n'
7 expected_stdout='2 3 9\n'


