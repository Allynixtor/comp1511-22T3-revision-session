max_cpu_seconds=3

files=letter_pairs.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g letter_pairs.c -o letter_pairs

command=./letter_pairs

show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="beekeeper\n"
2 stdin="balloon\n"
3 stdin="distinction\n"
4 stdin="woolloomooloo\n"
5 stdin="coffee\n"
6 stdin="smoothie\n"
7 stdin="beetroot\n"
8 stdin="terrifically\n"
9 stdin="wonderful\n"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:

### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest

1 expected_stdout="2\n"
2 expected_stdout="2\n"
3 expected_stdout="0\n"
4 expected_stdout="5\n"
5 expected_stdout="2\n"
6 expected_stdout="1\n"
7 expected_stdout="2\n"
8 expected_stdout="2\n"
9 expected_stdout="0\n"