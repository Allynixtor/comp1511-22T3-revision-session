max_cpu_seconds=3

files=scissors_paper_rock.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g scissors_paper_rock.c -o scissors_paper_rock

command=./scissors_paper_rock
show_actual_output = True
show_expected_output = True
show_diff = True
show_reproduce_command = True
show_stdin = True

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="S P R\nR R S\n"
2 stdin="S R P\nR P S\n"
3 stdin="A B C\nD E F\n"
4 stdin="S P R\nS R S\n"
5 stdin="P P R\nR P S\n"
6 stdin="S P R\nR R R\n"
7 stdin="S R S\nR P S\n"
## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:


### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='Player 1 won!\n'
2 expected_stdout='Player 2 won!\n'
3 expected_stdout='Moves invalid!\n'
4 expected_stdout='Player 1 won!\n'
5 expected_stdout='Player 1 won!\n'
6 expected_stdout='It\'s a draw!\n'
7 expected_stdout='Player 2 won!\n'