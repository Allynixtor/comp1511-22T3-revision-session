max_cpu_seconds=3

files=problem_template.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g test_problem_template.c problem_template.c other_files.c -o test_problem_template

command=./test_problem_template

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="1\n1\n1\n"

2 stdin="7\n4 2 6 1 3 5 7\n3\n"

3 stdin="7\n4 2 6 1 3 5 7\n1\n"

4 stdin="7\n4 2 6 1 3 5 7\n4\n"

5 stdin="7\n4 2 6 1 3 5 7\n5\n"

6 stdin="3\n1 2 3\n2"

7 stdin="3\n1 2 3\n3"

8 stdin="3\n1 2 3\n1"

9 stdin="15\n8 4 12 2 6 10 14 1 3 5 7 9 11 13 15\n7"

10 stdin="15\n8 4 12 2 6 10 14 1 3 5 7 9 11 13 15\n13"

11 stdin="15\n8 4 12 2 6 10 14 1 3 5 7 9 11 13 15\n6"

## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You can manually write them, or generate them
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest



### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
