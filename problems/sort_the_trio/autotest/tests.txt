max_cpu_seconds=3

files=sort_the_trio.c

compilers=[['gcc']]

compiler_args=-Wall -Werror -g main.c sort_the_trio.c -o sort_the_trio

command=./sort_the_trio

## =================================
## ====== Add test cases here ======
## =================================
## You can find more info about how to format test cases
## at https://github.com/COMP1511UNSW/autotest

1 stdin="0\n1\n0\n0\n1\n2\n2\n1\n2\n0\n"

2 stdin="1\n2\n1\n0\n2\n2\n0\n1\n0\n1\n1\n1\n"

3 stdin="2\n1\n1\n2\n0\n1\n2\n2\n1\n0\n"

4 stdin="2\n2\n2\n2\n2\n1\n"

5 stdin="2\n2\n0\n0\n0\n0\n"

6 stdin="0\n1\n2\n0\n0\n"


## ================================
## ======== End test cases ========
## ================================

## Below will be the expected output corresponding to each of your
## test cases. You don't need to write them; they will be generated
## using `autotest --generate_expected_output` using your
## `problem_template/solution/solution_file.c
## See https://github.com/COMP1511UNSW/autotest

## But in case you're curious, here's what it might look like:




### generated by: autotest --generate_expected_output - see https://github.com/COMP1511UNSW/autotest
1 expected_stdout='0 0 0 0 1 1 1 2 2 2\n'
2 expected_stdout='0 0 0 1 1 1 1 1 1 2 2 2\n'
3 expected_stdout='0 0 1 1 1 1 2 2 2 2\n'
4 expected_stdout='1 2 2 2 2 2\n'
5 expected_stdout='0 0 0 0 2 2\n'
6 expected_stdout='0 0 0 1 2\n'